name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on:
  push:
    branches:
      - main
      - dev
      - poc
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
      - dev
      - poc
    paths:
      - terraform/**

env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.3

      - name: Set environment variables
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "::set-output name=env::prod"
            echo "::set-output name=dir::./terraform/prod"
            echo "::set-output name=tfvars::variables_prod.tfvars"
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "::set-output name=env::dev"
            echo "::set-output name=dir::./terraform/dev"
            echo "::set-output name=tfvars::variables_dev.tfvars"
          elif [[ "${{ github.ref }}" == "refs/heads/poc" ]]; then
            echo "::set-output name=env::poc"
            echo "::set-output name=dir::./terraform/poc"
            echo "::set-output name=tfvars::variables_poc.tfvars"
          fi

      - name: Terraform init
        id: init
        working-directory: ${{ steps.set-env.outputs.dir }}
        run: terraform init

      - name: Terraform format
        id: fmt
        working-directory: ${{ steps.set-env.outputs.dir }}
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        working-directory: ${{ steps.set-env.outputs.dir }}
        run: terraform validate

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        working-directory: ${{ steps.set-env.outputs.dir }}
        run: terraform plan -no-color -input=false -var-file="${{ steps.set-env.outputs.tfvars }}"
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.AWS_EDUCATE_GITHUB_TOKEN }}
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ${{ steps.set-env.outputs.dir }}
        run: terraform apply -auto-approve -input=false -var-file="${{ steps.set-env.outputs.tfvars }}"
