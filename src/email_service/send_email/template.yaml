AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: AWS SAM template for sending emails

Parameters:
  AwsRegion:
    Type: String
    Default: "ap-northeast-1"
    Description: AWS region

Resources:
  EmailTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: email
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: run_id
          AttributeType: S
        - AttributeName: email_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: run_id
          KeyType: HASH
        - AttributeName: email_id
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: status_lsi
          KeySchema:
            - AttributeName: run_id
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: created_at_lsi
          KeySchema:
            - AttributeName: run_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  EmailSenderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: email-sender
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      CodeUri: .
      Environment:
        Variables:
          BUCKET_NAME: "email-sender-excel"
          TABLE_NAME: "email"
          SQS_QUEUE_URL: !Ref SQSEmailQueue
      Timeout: 30
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSEmailQueue.Arn
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: python3.11

  SQSEmailQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: email-queue
      ReceiveMessageWaitTimeSeconds: 20

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "lambda_execution_role-${AWS::AccountId}-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "LambdaPolicy-${AWS::AccountId}-${AWS::Region}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: "arn:aws:s3:::email-sender-excel/*"
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AwsRegion}:*:table/email"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource: !GetAtt SQSEmailQueue.Arn

Outputs:
  EmailSenderFunctionArn:
    Description: ARN of the email sender function
    Value: !GetAtt EmailSenderFunction.Arn
  SQSQueueUrl:
    Description: URL of the SQS Queue
    Value: !Ref SQSEmailQueue
